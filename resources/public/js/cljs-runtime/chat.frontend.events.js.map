{"version":3,"sources":["chat/frontend/events.cljs"],"mappings":";AAMA,yDAAA,zDAACA,oHAEA,WAAKC,EAAEA;AAAP,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,mDAAA,mDAAA,8BAAA,gQAAA,4OAAA,iEAAA,mFAAA,qFAAA,gEAAA,mFAAA,7xBAGiC,CAACC,kEAAAA,oEAAAA,wGACV,CAACC,iEAAAA,mEAAAA;;AAI1B,yDAAA,zDAACC,uIAEA,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASL;QAAT,AAAAM,4CAAAD,WAAA,IAAA,/DAAWG;AAAX,AACE,wDAAA,jDAACC,8CAAMF,oEAAeC;;AAyBzB,yDAAA,zDAACL,6HAEA,WAAKI,GAAGP;AAAR,AACE,OAACU,8BAAgB,+CAAA,iEAAA,hHAACC,4CAAIJ;;AAEzB,2DAAA,3DAACK,yKAEA,WAAKL,GAAGP;AAAR,AACE,sDAAA,4DAAA,3GAACW,4CAAIJ","names":["re_frame.core.reg_event_fx","_","ajax.core/transit-response-format","ajax.core/transit-request-format","re_frame.core.reg_event_db","p__12037","vec__12038","cljs.core.nth","db","v","cljs.core.assoc","chat.frontend.ws/send-message","cljs.core.get","re_frame.core.reg_sub"],"sourcesContent":["(ns chat.frontend.events\n  (:require [re-frame.core :as rf]\n            [ajax.core :as ajax]\n            [chat.frontend.ws :as ws]\n            [day8.re-frame.http-fx]))\n\n(rf/reg-event-fx\n :request\n (fn [_ _]\n   {:http-xhrio {:method :get\n                 :uri \"http://localhost:3000/hello\"\n                 :response-format (ajax/transit-response-format)\n                 :format (ajax/transit-request-format)\n                 :on-success [:hello.get/success]\n                 :on-failure [:hello.get/failure]}}))\n\n(rf/reg-event-db\n :update-chat-field\n (fn [db [_ v]]\n   (assoc db :chat-field v)))\n\n;; (rf/reg-event-fx\n;;  :send-message\n;;  (fn [{db :db} _]\n;;    (println (str \"Sending message with params \" (get db :chat-field \"\")))\n;;    {:http-xhrio {:method :get\n;;                  :uri \"http://localhost:3000/wstest\"\n;;                  :params (get db :chat-field \"\")\n;;                  :response-format (ajax/transit-response-format)\n;;                  :format          (ajax/transit-request-format)\n;;                  :on-success [:send-message/success]\n;;                  :on-failure [:send-message/failure]}}))\n\n;; (rf/reg-event-db\n;;  :send-message/success\n;;  (fn [_ response]\n;;    (println (str \"Success in sending message!\"))\n;;    (rf/dispatch [:update-messages])))\n\n;; (rf/reg-event-db\n;;  :send-message/failure\n;;  (fn [_ e]\n;;    (println (str \"Failure in sending message!\\n\" e))))\n\n(rf/reg-event-db\n :send-message\n (fn [db _]\n   (ws/send-message (get db :chat-field \"\"))))\n\n(rf/reg-sub\n :messages\n (fn [db _]\n   (get db :messages [])))"]}